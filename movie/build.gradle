plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	//테스트 커버리지 확인
	id 'jacoco'
}

group = 'shallwe'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}


bootWar{
	archiveName("ROOT.war")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	//aws
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	//log
	implementation "ca.pjer:logback-awslogs-appender:1.6.0"

	//Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.session:spring-session-data-redis'
	//embedded-redis
	//implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.1'

	//jsp
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'javax.servlet:jstl'

	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa'
    testImplementation 'junit:junit:4.13.1'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2:1.4.200'
	runtimeOnly 'mysql:mysql-connector-java:8.0.28'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// test에서 SLF4J
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

}

tasks.named('test') {
	useJUnitPlatform()
}

//Querydsl 추가, 자동 생성된 Q클래스 gradle clean으로 제거
clean {
	delete file('src/main/generated')
}

//jacoco 관련 설정
jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false

// 리포트 저장 경로를 설정
		html.destination file("jacoco/jacocoHtml")
		xml.destination file("jacoco/jacoco.xml")
	}

	dependsOn test // tests are required to run before generating the report

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"shallwe/movie/member/entity/**",
					"shallwe/movie/movie/entity",
					"shallwe/movie/wantmovie/entity/**",
					"shallwe/movie/comment/entity/**",
					"shallwe/movie/inquiry/entity/**",
					"shallwe/movie/answer/entity/**",
					"shallwe/movie/member/dto/**",
					"shallwe/movie/dto/**",
					"shallwe/movie/movie/dto/**",
					"shallwe/movie/comment/dto/**",
					"shallwe/movie/inquiry/dto/**",
					"shallwe/movie/answer/dto/**",
					"shallwe/movie/audit/**",
					"shallwe/movie/security/**",
					"shallwe/movie/s3/**",
					"shallwe/movie/sawmovie/entity/**"
			])
		}))
	}
}

jacocoTestCoverageVerification {

	violationRules { // 커버리지의 범위와 퍼센테이지를 설정
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.50
			}
		}
	}
}

